// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// !impotant do not change
//Follwing are the prisma schemas from nextauth for authentication purposes
model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String?   @unique
  email               String?   @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  role                String?   @default("PATIENT") // PATIENT, DOCTOR, ADMIN
  hasCompletedProfile Boolean   @default(false) // Flag to track profile completion

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // Add relation to Patient model
  patientProfile Patient?

  // Add this relation
  cart      Cart?

  // Add relation to ProductOrder
  productOrders   ProductOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//folloing are for application
model Patient {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  age           Int
  contactNumber String
  email         String   @unique
  area          String
  nic           String   @unique
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Connect to User model
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Relationships
  appointments Appointment[]
  payments     Payment[]
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String?
  price           Int?
  description     String?
  specification   Json?
  imageUrl        String?
  videoUrl        String?
  // Add new fields
  customOptions   Json?     // Store customization options as key-value pairs
  feedback        Json?     // Store customer feedback/comments
  // Relation to orders
  productOrders   ProductOrder[]
}

// New model for product orders
model ProductOrder {
  id              String    @id @default(cuid())
  userId          String    // The user who placed the order
  user            User      @relation(fields: [userId], references: [id])
  productId       Int       // The product being ordered
  product         Product   @relation(fields: [productId], references: [id])
  quantity        Int       @default(1)
  totalPrice      Float
  customizations  Json?     // The selected customization options
  status          String    @default("pending") // pending, approved, rejected, completed
  adminNotes      String?   // Notes from admin about the order
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
}

// Appointment management
model Appointment {
  id        String  @id @default(cuid())
  patientId Int
  patient   Patient @relation(fields: [patientId], references: [id])

  // Add this new field to link appointment to slot
  slotId          Int?
  appointmentSlot AppointmentSlot? @relation(fields: [slotId], references: [id])

  // Keep these existing fields for compatibility
  physiotherapistId Int?
  physiotherapist   Physiotherapist? @relation(fields: [physiotherapistId], references: [id])
  appointmentDate   DateTime
  startTime         String
  duration          Int // in minutes

  status        String   @default("pending") // pending, scheduled, completed, cancelled
  reason        String?
  notes         String?
  paymentId     String?
  paymentStatus String?
  fee           Float    @default(2500)
  payment       Payment?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  amount        Float
  method        String // card, cash, etc.
  status        String // pending, completed, failed, refunded
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Patient       Patient?    @relation(fields: [patientId], references: [id])
  patientId     Int?
}

model Physiotherapist {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  contactNumber  String
  specialization String
  experience     Int     @default(0) // Years of experience
  education      String?
  certifications String?
  bio            String? @db.Text
  availability   Json? // Store availability as JSON
  rating         Float?  @default(0)
  imageUrl       String? // Profile image
  isActive       Boolean @default(true)

  // Relationships
  appointments     Appointment[]
  appointmentSlots AppointmentSlot[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentSlot {
  id          Int      @id @default(autoincrement())
  date        DateTime
  startTime   String // Format: "HH:MM" in 24h format
  endTime     String // Format: "HH:MM" in 24h format
  capacity    Int      @default(1) // Maximum number of patients that can be booked
  bookedCount Int      @default(0) // Current number of bookings
  isAvailable Boolean  @default(true)

  // Relationships
  appointments Appointment[] // Appointments booked for this slot

  // Optional: link to physiotherapist if needed
  physiotherapistId Int?
  physiotherapist   Physiotherapist? @relation(fields: [physiotherapistId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, startTime, physiotherapistId]) // Ensure no duplicate slots
  @@index([date]) // Index for faster queries by date
}

// These models should be added to your schema.prisma file
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   // Store as string to match your product IDs
  name      String   // Store name for easier access and display
  price     Float    // Store price at time of adding to cart
  quantity  Int
  imageUrl  String?  // Optional image URL
  option    String   // For variations like size, color, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
}
