// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// !impotant do not change
//Follwing are the prisma schemas from nextauth for authentication purposes
model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String?   @unique
  email               String?   @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  role                String?   @default("PATIENT") // PATIENT, DOCTOR, ADMIN
  hasCompletedProfile Boolean   @default(false) // Flag to track profile completion

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // Add relation to Patient model
  patientProfile Patient?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//folloing are for application
model Patient {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  age           Int
  contactNumber String
  email         String   @unique
  area          String
  nic           String   @unique
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Connect to User model
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Relationships
  appointments Appointment[]
  payments     Payment[]
}

model Product {
  id            Int     @id @default(autoincrement())
  name          String?
  price         Int?
  description   String?
  specification Json?
  imageUrl      String?
  videoUrl      String?
}

// Appointment management
model Appointment {
  id                String           @id @default(cuid())
  patientId         Int
  patient           Patient          @relation(fields: [patientId], references: [id])
  physiotherapistId Int?
  physiotherapist   Physiotherapist? @relation(fields: [physiotherapistId], references: [id])
  appointmentDate   DateTime
  startTime         String
  duration          Int // in minutes
  status            String           @default("pending") // pending, scheduled, completed, cancelled
  reason            String?
  notes             String?
  paymentStatus     String           @default("unpaid") // unpaid, paid, refunded
  fee               Float            @default(2500)
  payment           Payment?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Payment {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  amount        Float
  method        String // card, cash, etc.
  status        String // pending, completed, failed, refunded
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Patient       Patient?    @relation(fields: [patientId], references: [id])
  patientId     Int?
}

model Physiotherapist {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  contactNumber  String
  specialization String
  experience     Int     @default(0) // Years of experience
  education      String?
  certifications String?
  bio            String? @db.Text
  availability   Json? // Store availability as JSON
  rating         Float?  @default(0)
  imageUrl       String? // Profile image
  isActive       Boolean @default(true)

  // Relationships
  appointments Appointment[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
