generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String   @id
  userId                   String   @unique(map: "Account_userId_key")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  user                     user     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model appointment {
  id              String           @id
  patientId       Int
  slotId          Int?
  appointmentDate DateTime
  startTime       String
  duration        Int
  status          String           @default("pending")
  reason          String?
  notes           String?
  paymentId       String?
  paymentStatus   String?
  fee             Float            @default(2500)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  patient         patient          @relation(fields: [patientId], references: [id], map: "Appointment_patientId_fkey")
  appointmentslot appointmentslot? @relation(fields: [slotId], references: [id], map: "Appointment_slotId_fkey")
  payment         payment?

  @@index([patientId], map: "Appointment_patientId_fkey")
  @@index([slotId], map: "Appointment_slotId_fkey")
}

model appointmentslot {
  id          Int           @id @default(autoincrement())
  date        DateTime
  startTime   String
  endTime     String
  capacity    Int           @default(1)
  bookedCount Int           @default(0)
  isAvailable Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  appointment appointment[]

  @@unique([date, startTime], map: "AppointmentSlot_date_startTime_key")
  @@index([date], map: "AppointmentSlot_date_idx")
}

model authenticator {
  credentialID         String  @unique(map: "Authenticator_credentialID_key")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_userId_fkey")

  @@id([userId, credentialID])
}

model patient {
  id            Int           @id @default(autoincrement())
  name          String
  username      String        @unique(map: "Patient_username_key")
  dateOfBirth   DateTime
  contactNumber String
  email         String        @unique(map: "Patient_email_key")
  area          String
  nic           String
  address       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  userId        String        @unique(map: "Patient_userId_key")
  appointment   appointment[]
  user          user          @relation(fields: [userId], references: [id], map: "Patient_userId_fkey")
  payment       payment[]
}

model payment {
  id               String        @id
  amount           Float
  method           String
  status           String
  transactionId    String?
  appointmentId    String?       @unique(map: "Payment_appointmentId_key")
  productOrderId   String?       @unique(map: "Payment_productOrderId_key")
  patientId        Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  isAdvancePayment Boolean       @default(false)
  paymentType      String?
  appointment      appointment?  @relation(fields: [appointmentId], references: [id], map: "Payment_appointmentId_fkey")
  patient          patient?      @relation(fields: [patientId], references: [id], map: "Payment_patientId_fkey")
  productorder     productorder? @relation(fields: [productOrderId], references: [id], map: "Payment_productOrderId_fkey")

  @@index([appointmentId], map: "Payment_appointmentId_idx")
  @@index([patientId], map: "Payment_patientId_idx")
  @@index([productOrderId], map: "Payment_productOrderId_idx")
}

model product {
  id            Int            @id @default(autoincrement())
  name          String?
  price         Int?
  description   String?
  specification Json?
  imageUrl      String?
  videoUrl      String?
  customOptions Json?
  feedback      Json?
  productorder  productorder[]
}

model productorder {
  id             String   @id
  userId         String
  productId      Int
  quantity       Int      @default(1)
  totalPrice     Float
  customizations Json?
  status         String   @default("pending")
  adminNotes     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  payment        payment?
  product        product  @relation(fields: [productId], references: [id], map: "ProductOrder_productId_fkey")
  user           user     @relation(fields: [userId], references: [id], map: "ProductOrder_userId_fkey")

  @@index([productId], map: "ProductOrder_productId_idx")
  @@index([userId], map: "ProductOrder_userId_idx")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_idx")
}

model user {
  id                  String          @id
  name                String?
  username            String?         @unique(map: "User_username_key")
  email               String?         @unique(map: "User_email_key")
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  role                String?         @default("PATIENT")
  hasCompletedProfile Boolean         @default(false)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime
  account             account?
  authenticator       authenticator[]
  patient             patient?
  productorder        productorder[]
  session             session[]
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
