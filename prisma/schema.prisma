// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// !impotant do not change
//Follwing are the prisma schemas from nextauth for authentication purposes
model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String?   @unique
  email               String?   @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  role                String?   @default("PATIENT")
  hasCompletedProfile Boolean   @default(false)

  accounts Account[]
  sessions Session[]

  Authenticator Authenticator[]
  patient       Patient?
  productOrders ProductOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Patient {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  dateOfBirth   DateTime
  contactNumber String
  email         String   @unique
  area          String
  nic           String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  appointments Appointment[]
  payments     Payment[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String?
  price         Int?
  description   String?
  specification Json?
  imageUrl      String?
  videoUrl      String?
  customOptions Json?
  feedback      Json?
  productOrders ProductOrder[]
}

model ProductOrder {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  productId      Int
  product        Product  @relation(fields: [productId], references: [id])
  quantity       Int      @default(1)
  totalPrice     Float
  customizations Json?
  status         String   @default("pending")
  adminNotes     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  payment Payment?

  @@index([userId])
  @@index([productId])
}

model Appointment {
  id        String  @id @default(cuid())
  patientId Int
  patient   Patient @relation(fields: [patientId], references: [id])

  slotId          Int?
  appointmentSlot AppointmentSlot? @relation(fields: [slotId], references: [id])

  appointmentDate DateTime
  startTime       String
  duration        Int

  status        String   @default("pending")
  reason        String?
  notes         String?
  paymentId     String?
  paymentStatus String?
  fee           Float    @default(2500)
  payment       Payment?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id               String  @id @default(cuid())
  amount           Float
  method           String
  status           String
  transactionId    String?
  paymentType      String?
  isAdvancePayment Boolean @default(false)

  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  productOrderId String?       @unique
  productOrder   ProductOrder? @relation(fields: [productOrderId], references: [id])

  patientId Int?
  patient   Patient? @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentSlot {
  id          Int      @id @default(autoincrement())
  date        DateTime
  startTime   String
  endTime     String
  capacity    Int      @default(1)
  bookedCount Int      @default(0)
  isAvailable Boolean  @default(true)

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, startTime])
  @@index([date])
}
